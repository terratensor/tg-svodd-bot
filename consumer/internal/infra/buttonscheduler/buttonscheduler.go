package buttonscheduler

import (
	"log"
	"math/rand"
	"sync"
	"time"
)

// ButtonScheduler —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∫–∞–∑–æ–º –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ —Å–ª—É—á–∞–π–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
type ButtonScheduler struct {
	counterMutex sync.Mutex // –ú—å—é—Ç–µ–∫—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—á–µ—Ç—á–∏–∫—É
	messageCount int        // –°—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –∫–Ω–æ–ø–∫–∏
	nextButtonAt int        // –ù–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞
	rng          *rand.Rand // –õ–æ–∫–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
}

// NewButtonScheduler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π ButtonScheduler
func NewButtonScheduler() *ButtonScheduler {
	return &ButtonScheduler{
		rng: rand.New(rand.NewSource(time.Now().UnixNano())),
	}
}

// resetButtonInterval –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 3 –¥–æ 10 –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç nextButtonAt
func (bs *ButtonScheduler) resetButtonInterval() {
	bs.counterMutex.Lock()
	defer bs.counterMutex.Unlock()
	bs.nextButtonAt = bs.rng.Intn(8) + 3 // –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 3 –¥–æ 10
	bs.messageCount = 0                  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
	log.Printf("üö©üö©üö© –°–ª–µ–¥—É—é—â–∞—è –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ —á–µ—Ä–µ–∑ %d —Å–æ–æ–±—â–µ–Ω–∏–π", bs.nextButtonAt)
}

// ShouldShowButton –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É
func (bs *ButtonScheduler) ShouldShowButton() bool {
	bs.counterMutex.Lock()
	defer bs.counterMutex.Unlock()
	bs.messageCount++
	return bs.messageCount >= bs.nextButtonAt
}

// Reset —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏ –∑–∞–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
func (bs *ButtonScheduler) Reset() {
	bs.resetButtonInterval()
}
