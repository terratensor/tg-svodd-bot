package callbackserver

import (
	"context"
	"encoding/json"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/terratensor/tg-svodd-bot/consumer/internal/metrics"
)

// CallbackServer –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
type CallbackServer struct {
	server *http.Server
	m      *metrics.Metrics
}

// New —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä CallbackServer
func New(addr string, m *metrics.Metrics) *CallbackServer {
	return &CallbackServer{
		server: &http.Server{
			Addr: addr,
		},
		m: m,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Graceful Shutdown
func (cs *CallbackServer) Start() {
	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
	http.HandleFunc("/callback", cs.handleCallback)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		log.Printf("Starting callback server on %s", cs.server.Addr)
		if err := cs.server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("Failed to start callback server: %v", err)
		}
	}()

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Graceful Shutdown
	cs.setupGracefulShutdown()
}

// handleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram
func (cs *CallbackServer) handleCallback(w http.ResponseWriter, r *http.Request) {
	var update struct {
		CallbackQuery struct {
			ID   string `json:"id"`
			From struct {
				ID int64 `json:"id"`
			} `json:"from"`
			Message struct {
				MessageID int `json:"message_id"`
			} `json:"message"`
			Data string `json:"data"` // callback_data
		} `json:"callback_query"`
	}

	if err := json.NewDecoder(r.Body).Decode(&update); err != nil {
		log.Printf("Failed to decode callback query: %v", err)
		http.Error(w, "Bad Request", http.StatusBadRequest)
		return
	}

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É
	cs.m.ButtonClicks.WithLabelValues().Inc()
	log.Printf("üö©üö©üö© Button clicked by user %d", update.CallbackQuery.From.ID)

	// –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ callback_data
	redirectURL := update.CallbackQuery.Data

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
	response := map[string]interface{}{
		"method":            "answerCallbackQuery",
		"callback_query_id": update.CallbackQuery.ID,
		"url":               redirectURL, // –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–∑ callback_data
	}

	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(response); err != nil {
		log.Printf("Failed to encode response: %v", err)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
	}
}

// setupGracefulShutdown –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Graceful Shutdown –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
func (cs *CallbackServer) setupGracefulShutdown() {
	// –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	stop := make(chan os.Signal, 1)
	signal.Notify(stop, os.Interrupt, syscall.SIGTERM)

	// –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-stop

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	log.Println("Shutting down callback server...")
	if err := cs.server.Shutdown(ctx); err != nil {
		log.Printf("Error during server shutdown: %v", err)
	} else {
		log.Println("Callback server stopped gracefully")
	}
}
